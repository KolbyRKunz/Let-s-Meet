@{
    ViewData["Title"] = "Home Page";
}

<!--Sweet Alert 2-->
<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<!--<script src="sweetalert2.all.min.js"></script>-->

<body>
    <div class="text-left">
        <h2 class="description">Groups</h2>
        <hr />
    </div>

    <div>
        <button id="createGroupBtn" class="btn btn-danger">Create Group</button>
    </div>

    <!--TODO: Style this better-->
    <div id="groupModal" class="modal"> 
        <div class="modal-content">
            <div class="modal-header">
                <h1>Create Group</h1>
                <span class="close">&times;</span>
            </div>
            <div id="modalBody">
                <h4>Group Name</h4>
                <input type="text" class="modalItem " id="groupName" placeholder="Group Name" />
                <span>Add member from friends list</span>
                <!--TODO: change this to grab the user's actual friends via api instead of hard coded data-->
                <select name="friends" class="friends">
                    <option value="Friend1">Friend1</option>
                    <option value="Friend2">Friend2</option>
                    <option value="Friend3">Friend3</option>
                </select>
            </div>
            <span id="addMember" class="modalItem">+ Add Member</span>
            <div class="modal-footer">
                <span class="close">Create</span>
            </div>
        </div>
    </div>

    <h2 class="description">My groups</h2> <!--TODO: Figure out the layout of this page better-->
    <hr />
    <div id="groupList" style="display:flex;justify-content:flex-end;flex-direction:column;"></div> <!--Figure out how to get the css into the site.css-->
</body>


<script>
    fetch('../api/getUserGroups?name=' + '@User.Identity.Name') //TODO: This call will need to change to correct control api call
        .then(function (response) {
            return response.json();
        })
        .then(function (data) {
            getUserGroupData(data);
        })
        .catch(function (e) {
            console.log("error in groups: " + e);
        })

    function getUserGroupData(data){
        //console.log(data)
        var groupContainer = document.getElementById("groupList");
        for(var i = 0; i < data.length; i++){
            var div = document.createElement("a");
            //TODO: this API call will end up changing later?
            div.setAttribute('href', '../Group/Index?groupId=' + data[i].groupId + '&groupName=' + data[i].groupName); //TODO: Make this more secure, only let people in the group access the url, if we have time
            div.setAttribute('class', 'groupLink'); //Use this later for styling
            div.innerHTML = data[i].groupName;
            groupContainer.appendChild(div);
        }
    }



    /*TODO: this modal stuff needs improvement, I'm just trying to get something out there and working
        This should go in a function, but I'm having issues with the onclick and needing to click
        things twice in order for it to appear when I don't put it in a function, it behaves as needed
    */
    var modal = document.getElementById('groupModal');
    var btn = document.getElementById('createGroupBtn');
    var close = document.getElementsByClassName('close')[0];
    var submission = document.getElementsByClassName('close')[1];
    var addMember = document.getElementById('addMember');

    btn.onclick = function () {
        modal.style.display = "block";
    }
    close.onclick = function () {
        modal.style.display = "none";
        document.getElementById("groupName").value = ""; 
        location.reload(); //TODO: figure out better way to clear user input
    }
    window.onclick = function (event) {
        if (event.target == modal) {
            modal.style.display = "none";
            document.getElementById("groupName").value = ""; 
            location.reload(); //TODO: figure out better way to clear user input
        }
    }

    addMember.onclick = function() {
        /*This is where the work of adding another select tag goes, adding another member*/
        /*https://stackoverflow.com/questions/17001961/how-to-add-drop-down-list-select-programmatically
        What I followed for hard coded data, it should hopefully translate somewhat for the actual data*/
        var selector = document.getElementById("modalBody");
        //TODO: change this to grab the user's actual friends via api instead of hard coded data
        var array = ["Friend1", "Friend2", "Friend3"];
        var selectList = document.createElement("select");
        selectList.className = "friends";
        selector.appendChild(selectList);
        for (var i = 0; i < array.length; i++) {
            var option = document.createElement("option");
            option.value = array[i];
            option.text = array[i];
            selectList.appendChild(option);
        }
    }

    submission.onclick = function(){
        modal.style.display = "none";
        var groupName = document.getElementById("groupName").value;
        document.getElementById("groupName").value = ""; //Clear the user inputs, saved in variable already
        var select = document.getElementsByClassName('friends');
        var members = "" //TODO: figure out a better way, right now just making a comma separated list to pass back to the c# code of the members to add to the group. C# needs to add the person creating the group to the group
        for (var i = 0; i < select.length; i++)
        {
            var text = select[i].options[select[i].selectedIndex].text;
            //TODO: Find a better fix for the trailing comma removal if possible
            if(i == (select.length - 1)){
                members += text;
            }
            else {
                members += text + ",";
            }
        }
        console.log(groupName);
        console.log(members);
        
        /*IMPORTANT TODO: C# needs to add the person creating the group to the group or I can append it here to the members with @User.Identity.Name
            groupMembers is a comma separated list at the moment*/
        let data = {
            groupName: groupName,
            groupMembers: members,
        }
        //TODO: this is the create group API call
        let url = ""; //"../Api/createGroup?groupName=" + data.groupName + "&groupMembers=" + data.groupMembers;

        $.ajax({
            url: url,
            type: "POST",
            data: JSON.stringify(data),
            contentType: "application/json;carset=utf-8",
            dataType: "json",
            success: function (response) {
                console.log(response);
                Swal.fire({
                    icon: 'success',
                    title: "Group Created!",
                }).then((result) => {
                    location.reload();
                })
            },
            error: function (error) {
                Swal.fire({
                    icon: 'error',
                    title: "Error with group creation",
                }).then((result) => {
                    console.log(error);
                    location.reload();
                })
            }
        })
    }
    


    //TODO: Delete the createGroupPopUp and createGroup once the new way is created with modal and working
    async function createGroupPopUp() {
        const { value: formValues } = await Swal.fire({
            title: 'Create Group',
            html: //This does no input checking currently
                '<div style="display:grid"><label>Group Name</label>' +
                '<input type="text" id="groupName" class="swal2-input">' +
                '<br/></div>'+
                '<div style="display:grid"><label>Enter group members email (separate with a comma)</label>' +
                '<input type="text" id="members" class="swal2-input">' +
                '<br/></div>',
            focusConfirm: false,
            position: 'center',
            showCancelButton: true,
            preConfirm: () => {
                return {
                    groupName: $('#groupName').val(),
                    members: $('#members').val()
                }
            }
        });
        return formValues;
    }

    function createGroup() {
        createGroupPopUp().then((values) => {
            let data = {
                groupName: values.groupName.toString(),
                /*IMPORTANT: The person creating the group is part of the group
                    C# code needs to include them in the group? Or should we do that here? Right now I let C# do it
                    In the future, maybe pass back a groupLeader json and allow the leader to delete groups?*/
                groupMembers: values.members //TODO: this doesn't pass back the person creating the group, C# API is currently doing that in this version.
            }
            console.log(data);

            /*TODO: get user permission before adding them to a group, this should be a later task also after things are working
                Right now it just assumes no one will add people to groups maliciously*/ 
            /*TODO: this api call will need to change to go to the correct controller api call*/ 
            let url = "../Api/createGroup?groupName=" + data.groupName + "&groupMembers=" + data.groupMembers;

            $.ajax({ 
                url: url,
                type: "POST",
                data: JSON.stringify(data),
                contentType: "application/json;carset=utf-8",
                dataType: "json",
                success: function(response){
                    console.log(response);
                    Swal.fire({
                        icon: 'success',
                        title: "Group Created!",
                    }).then((result) => {
                        location.reload();
                    })
                },
                error: function (error){
                    Swal.fire({
                        icon: 'error',
                        title: "Error with group creation",
                    }).then((result) => {
                        console.log(error)
                    })
                }
            })
        })
        .catch(error => console.log(error));
    }   
    
</script>
