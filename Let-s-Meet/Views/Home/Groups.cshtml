@{
    ViewData["Title"] = "Home Page";
}

<!--Sweet Alert 2-->
<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<!--<script src="sweetalert2.all.min.js"></script>-->

<body>
    <div class="text-left">
        <h2 class="description">Groups</h2>
        <hr />
    </div>

    <div>
        <button onClick="createGroup()" id="createGroupBtn" class="btn btn-danger">Create Group</button> <!--TODO: Do we want to do it by email? How does adding friends to a group work?-->
    </div>

    <h2 class="description">My groups</h2> <!--TODO: Figure out the layout of this page better-->
    <hr />
    <div id="groupList" style="display:flex;justify-content:flex-end;flex-direction:column;"></div> <!--Figure out how to get the css into the site.css-->
</body>


<script>
    fetch('../api/getUserGroups?name=' + '@User.Identity.Name') //TODO: This call will need to change to correct control api call
        .then(function (response) {
            return response.json();
        })
        .then(function (data) {
            getUserGroupData(data);
        })
        .catch(function (e) {
            console.log("error in groups: " + e);
        })

    function getUserGroupData(data){
        //console.log(data)
        var groupContainer = document.getElementById("groupList");
        for(var i = 0; i < data.length; i++){
            var div = document.createElement("a");
            //TODO: this API call will end up changing later?
            div.setAttribute('href', '../Group/Index?groupId=' + data[i].groupId + '&groupName=' + data[i].groupName); //TODO: Make this more secure, only let people in the group access the url, if we have time
            div.setAttribute('class', 'groupLink'); //Use this later for styling
            div.innerHTML = data[i].groupName;
            groupContainer.appendChild(div);
        }
    }

    async function createGroupPopUp() {
        const { value: formValues } = await Swal.fire({
            title: 'Create Group',
            html: //This does no input checking currently
                '<div style="display:grid"><label>Group Name</label>' +
                '<input type="text" id="groupName" class="swal2-input">' +
                '<br/></div>'+
                '<div style="display:grid"><label>Enter group members email (separate with a comma)</label>' +
                '<input type="text" id="members" class="swal2-input">' +
                '<br/></div>',
            focusConfirm: false,
            position: 'center',
            showCancelButton: true,
            preConfirm: () => {
                return {
                    groupName: $('#groupName').val(),
                    members: $('#members').val()
                }
            }
        });
        return formValues;
    }

    function createGroup() {
        createGroupPopUp().then((values) => {
            let data = {
                groupName: values.groupName.toString(),
                /*IMPORTANT: The person creating the group is part of the group
                    C# code needs to include them in the group? Or should we do that here? Right now I let C# do it
                    In the future, maybe pass back a groupLeader json and allow the leader to delete groups?*/
                groupMembers: values.members //TODO: this doesn't pass back the person creating the group, C# API is currently doing that in this version.
            }
            console.log(data);

            /*TODO: get user permission before adding them to a group, this should be a later task also after things are working
                Right now it just assumes no one will add people to groups maliciously*/ 
            /*TODO: this api call will need to change to go to the correct controller api call*/ 
            let url = "../Api/createGroup?groupName=" + data.groupName + "&groupMembers=" + data.groupMembers;

            $.ajax({ 
                url: url,
                type: "POST",
                data: JSON.stringify(data),
                contentType: "application/json;carset=utf-8",
                dataType: "json",
                success: function(response){
                    console.log(response);
                    Swal.fire({
                        icon: 'success',
                        title: "Group Created!",
                    }).then((result) => {
                        location.reload();
                    })
                },
                error: function (error){
                    Swal.fire({
                        icon: 'error',
                        title: "Error with group creation",
                    }).then((result) => {
                        console.log(error)
                    })
                }
            })
        })
        .catch(error => console.log(error));
    }   
    
</script>
