@{
    ViewData["Title"] = "Home Page";
}

<head>
    <meta charset='utf-8' />
    <!--Full Calendar-->
    <link href='~/lib/fullcalendar/main.css' rel='stylesheet' />
    <link rel="stylesheet" type="text/css" href="~/css/site.css" />
    <script src='~/lib/fullcalendar/main.js'></script>
    <!--Sweet Alert 2-->
    <script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <!--<script src="sweetalert2.all.min.js"></script>-->

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var calendarEl = document.getElementById('calendar');
            var calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'timeGridWeek',
                headerToolbar: {
                    left: 'prev,next,title',
                    center: '',
                    right: 'today,dayGridMonth,timeGridWeek,timeGridDay'
                },

                height: "auto",

                events: '/EventModels/GetEvents',
                //events: '/api/getUserEvents?name=' + '@User.Identity.Name',// TODO: CHANGE, will need to pass in the userId later in the non-mock data call to query the database

                //editable:true, //TODO: Try to add this back later, the clicking and dragging of events doesn't update on the database correctly yet
                selectable:true,
                nowIndicator: true,
                navLinks: true,
                timeZone:'UTC',
                //timeZone:'local',

                eventClick: function(info){
                    var eventID = info.event.id;
                    var name = '@User.Identity.Name'; //TODO: Will this will need to be changed later with actual id
                    console.log(info);
                    console.log(eventID);
                    console.log(typeof eventID);

                    Swal.fire({
                        title: 'Are you sure you want to delete this event?',
                        text: "You won't be able to revert this!",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Yes, delete event!'
                    }).then((result) => {
                        if(result.isConfirmed)
                        {
                            info.event.remove();
                            $.ajax({  ///now we need to update the backend
                                url: '/EventModels/Delete/' + eventID, //This will need to change to be for specific user and event
                                type: 'POST'
                            });
                        }
                    })
                },

                select: function(data){
                    console.log(data); //this is the data given by the select callback, fullcalendar
                    var startDate = formatStartEndDate(data.start)//FIXED: Have to give it start/end and not startStr/endStr becuase it will leave out important data
                    var endDate = formatStartEndDate(data.end) //TODO: convert to local time currently UTC

                    addEvent(startDate, endDate).then((values) => { //JS promise?
                        console.log(values);//this is a JSON/object of stuff from the promise of addEvent()
                        var eventName = values.eventName
                        var calendarID = values.calendarID

                        var startDate = $('#startDate').val()
                        var endDate = $('#endDate').val()

                        startDate = new Date(startDate)
                        endDate = new Date(endDate)

                        if(endDate.getTime() < startDate.getTime()) //TODO: make it take care of this in the event creation popup so users don't have to reselect items and enter title
                        {
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops...',
                                text: 'The End Date can\'t be before Start Date',
                            })
                            return
                        }
                        if (eventName == "") //TODO: make it take care of this in the event creation popup so users don't have to reselect items and enter title
                        {
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops...',
                                text: 'Please enter Event Name',
                            })
                            return
                        }

                        //Need to convert to UTC for database
                        startDate = startDate.toUTCString()
                        endDate = endDate.toUTCString()

                        var event = {
                            title: eventName,
                            start: startDate,
                            end: endDate
                        };
                        calendar.addEvent(event);

                        //REMEMBER: Need dates/times to go to the backend in UTC format!
                        //TODO: need to update the database about this event
                        //var url = 'api/addUserEvent?startTime=' + data.start.toUTCString() + '&endTime=' + data.end.toUTCString() + '&title=' + eventName + '&name=' + '@User.Identity.Name' //TODO: Need to change userId
                        //var url = 'api/addUserEvent?startTime=' + startDate + '&endTime=' + endDate + '&title=' + eventName + '&name=' + '@User.Identity.Name' TODO: Need to change userId
                        var url = 'EventModels/Create';

                        var eventData = {
                            title: eventName,
                            startTime: startDate,
                            endTime: endDate,
                            calendarID: calendarID
                        }

                        $.ajax({
                            type: 'POST',
                            url: url,
                            dataType: 'json',
                            data: eventData
                        })
                        .done(function(result) {
                            console.log(result)
                            calendar.refetchEvents() //Instead of location.reload() this will refresh the calendar
                        });
                        
                    })
                    .catch(error => console.log(error));
                },
                
            });
            calendar.render();
        });

    </script>
</head>

<h1 class="description">My Schedule</h1>

<div class="calendarContainer">
    <div id='calendar' style=" padding: 15px; background-color: #950741; border-radius: 30px"></div>
</div>

<script>

    async function addEvent(startDate, endDate){

        
        // Generate html string for calendar select input using calendars in ViewBag
        var calendars = JSON.parse('@Html.Raw(@ViewBag.Calendars)');
        var calendarInput = '<select class="swal2-input" name="calendars">';
        for (var i = 0; i < calendars.length; i++) {
            calendarInput += '<option value="' + calendars[i].calendarID + '">' + calendars[i].name + '</option>';
        }
        calendarInput += '</select>';

        

        const { value: formValues } = await Swal.fire({
            title: 'Event Info',
            html: //This does no input checking currently
                //TODO: Figure out how to style in css not inline like this. 
                //Was struggling to get site.css to acess parts of the popup
                '<div style="display:grid"><label>Event Name</label>' +
                '<input type="text" id="eventName" class="swal2-input">' +
                '<br/></div>' +
                '<div style="display:grid"><label>Calendar</label>' +
                calendarInput +
                '<br/></div>' +
                '<div style="display:grid"><label>Start Date</label>' +
                `<input type="datetime-local" id="startDate" class="swal2-input" value="${startDate}">` + //IMPORTANT: take not of the ` back tick here for string interpolation
                '<br/></div>' +
                '<div style="display:grid"><label>End Date</label>' +
                `<input type="datetime-local" id="endDate" class="swal2-input" value="${endDate}">` +
                '<br/></div>',
            focusConfirm: false,
            position: 'top-end',
            showCancelButton:true,
            preConfirm: () => {
                return {
                    eventName: $('#eventName').val(),
                    startDate: $('#startDate').val(),
                    endDate: $('#endDate').val(),
                    calendarID: $('select[name="calendars"]').val()
                }
            }
        });
        return formValues;
    }

    function formatStartEndDate(date) {
        var formattedDate = new Date(date)
        var d = String(formattedDate.getDate()).padStart(2, '0')
        var m = String(formattedDate.getMonth() + 1).padStart(2, '0'); //January is 0!
        var y = formattedDate.getFullYear();
        var h = String(formattedDate.getHours()).padStart(2, '0');
        var mi = String(formattedDate.getMinutes()).padStart(2, '0')
        formattedDate = y + "-" + m + "-" + d + "T" + h + ":" + mi
        return formattedDate
    }
</script>
