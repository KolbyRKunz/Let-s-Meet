<link rel="stylesheet" type="text/css" href="~/css/site.css" />
<!--moment.js-->
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment-with-locales.min.js" integrity="sha512-42PE0rd+wZ2hNXftlM78BSehIGzezNeQuzihiBCvUEB3CVxHvsShF86wBWwQORNxNINlBPuq7rG4WWhNiTVHFg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<!--Sweet Alert 2-->
<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<!--<script src="sweetalert2.all.min.js"></script>-->


<head>
    <meta charset='utf-8' />
    <link href='~/lib/fullcalendar/main.css' rel='stylesheet' />
    <link rel="stylesheet" type="text/css" href="~/css/site.css" />
    <script src='~/lib/fullcalendar/main.js'></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var calendarEl = document.getElementById('calendar');
            var calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'timeGridWeek',
                headerToolbar: {
                    left: 'prev,next,title',
                    center: '',
                    right: 'today,dayGridMonth,timeGridWeek,timeGridDay'
                },

                height: "auto",

                events: `/EventModels/GetCalendarEvents?calendarIds=${"@ViewBag.GroupCalendarID"}`, //TODO: is this the correct call
                
                selectable:true,
                nowIndicator: true,
                navLinks: true,
                nowIndicator: true,
                timeZone:'local',

                //IMPORTANT: this is doing the displaying of the location since it's not a default fullcalendar attribute
                eventDidMount: function (info) {
                    //Need to make sure it's not month view because this won't work there
                    if (info.view.type != 'dayGridMonth') //This doesn't work on month view
                    {
                        let location = document.createElement('div');
                        location.innerHTML = info.event.extendedProps.location;
                        info.el.querySelector('.fc-event-title-container').append(location);
                    }
                },
                
                eventClick: function (info) {
                    var eventID = info.event.id;
                    Swal.fire({
                        title: 'Are you sure you want to delete this event?',
                        text: "You won't be able to revert this!",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Yes, delete event!'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            info.event.remove();
                            var url = '/EventModels/Delete';

                            var eventData = {
                                id: parseInt(eventID)
                            }

                            $.ajax({
                                type: 'POST',
                                url: url,
                                dataType: 'json',
                                contentType: 'application/json',
                                data: JSON.stringify(eventData)
                            })
                        }
                    })
                },

                select: function (data) {
                    console.log(data); //this is the data given by the select callback, fullcalendar
                    var startDate = formatStartEndDate(data.start)//FIXED: Have to give it start/end and not startStr/endStr becuase it will leave out important data
                    var endDate = formatStartEndDate(data.end) //TODO: convert to local time currently UTC

                    addEvent(startDate, endDate).then((values) => { //JS promise?
                        console.log(values);//this is a JSON/object of stuff from the promise of addEvent()
                        var eventName = values.eventName
                        var calendarID = "@ViewBag.GroupCalendarID"
                        var location = values.location
                        var startDate = $('#startDate').val()
                        var endDate = $('#endDate').val()

                        startDate = new Date(startDate)
                        endDate = new Date(endDate)

                        if (endDate.getTime() < startDate.getTime()) //TODO: make it take care of this in the event creation popup so users don't have to reselect items and enter title
                        {
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops...',
                                text: 'The End Date can\'t be before Start Date',
                            })
                            return
                        }
                        if (eventName == "") //TODO: make it take care of this in the event creation popup so users don't have to reselect items and enter title
                        {
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops...',
                                text: 'Please enter Event Name',
                            })
                            return
                        }

                        /*Need to convert to ISOstring for database
                            it has a similar idea to UTC, but different formatting
                            but I found the C# played nicer with this than .toUTCString()*/
                        startDate = startDate.toISOString()
                        endDate = endDate.toISOString()

                        //REMEMBER: Need dates/times to go to the backend in UTC format!
                        var url = '/EventModels/Create';

                        var eventData = {
                            title: eventName,
                            startTime: startDate,
                            endTime: endDate,
                            calendarID: calendarID,
                            location: location
                        }
                        console.log(eventData)
                        $.ajax({
                            type: 'POST',
                            url: url,
                            contentType: 'application/json',
                            data: JSON.stringify(eventData)
                        })
                        .done(function (result) {
                            console.log(result)
                            calendar.refetchEvents() //Instead of location.reload() this will refresh the calendar
                        });

                    })
                    .catch(error => console.log(error));
                },
            
            });
            calendar.render();
        });
    </script>
</head>


<div>
    <h1 class="description" id="groupName">Group Calendar</h1>
    <hr />
</div>
<div style="padding:1%">
    <button id="createMeetingBtn" class="btn btn-danger" data-target="#meetingCreationModal" data-toggle="modal">Let's Meet!</button>
    <button onClick="groupLink()" class="btn btn-danger">Get Group Join Link</button>
    <button onClick="leaveGroup()" class="btn btn-danger">Leave Group</button>
</div>

<div id="groupInfo">
    <div class="calendarContainer" id="groupCalendar">
        <div id='calendar' style="padding: 15px; background-color: #950741; border-radius: 30px"></div>
    </div>  
    <div>
        <div class="groupItems">
            <h5 class="qrCapton">QRcode to join group from mobile</h5>
            <img id="QrCode" src = @ViewBag.image />
        </div>
        <div class="groupItems"  id="groupMembers">
            <h3>Group Members</h3>
        </div>
    </div>
</div>

 <!--TODO: Style this better-->
<div id="meetingCreationModal" class="modal"> 
    <div class="modal-content">
        <div class="modal-header">
            <h1>Let's Meet!</h1>
            <span class="close" data-dismiss="modal">Cancel</span>
        </div>
        <div id="modalBody">
            <h4>Reason for meeting</h4>
            <input type="text" class="modalItem " id="meetingReason" placeholder="Reason" />
            <h4>Location</h4>
            <input type="text" class="modalItem " id="meetingLocation" placeholder="Location" />
            <h4>How soon do you want to hold the meeting?</h4>
            <select id="meetingDaysOut">
                <option value="1">Within 1 day from now</option>
                <option value="2">Within 2 days from now</option>
                <option value="3">Within 3 days from now</option>
                <option value="4">Within 4 days from now</option>
                <option value="5">Within 5 days from now</option>
                <option value="6">Within 6 days from now</option>
                <option value="7">Within 7 days from now</option>
            </select>
            <!--TODO: this can be removed if we don't want the select, I can just note that it's only hour long meetings for now-->
            <h4>Length of the meeting</h4>
            <select id="meetingLength">
                <option value="1">1 hour</option>
            </select>
        </div>
        <div class="modal-footer">
            <span class="close" data-toggle="modal" data-target="#meetingConfirmationModal" data-dismiss="modal">Let's Meet!</span>
        </div>
    </div>
</div>

<div id="meetingConfirmationModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h1>Let's Meet!</h1>
            <span class="close" data-dismiss="modal">Cancel</span>
        </div>
        <div id="modalBody">
            <div>
                <h4>Select a time from the ones below for a meeting</h4>
                <!--TODO: is this how we want to solve the issue or something else?-->
                <h5>If none of these work, hit cancel and start a new search with different days</h5>
            </div>
            <div id="meetingTimesList">
            </div>
        </div>
        <div class="modal-footer">
        </div>
    </div>
</div>

<script>
    /*NOTE: I decided to use a modal here instead of swal2 since a modal has better support for multiple inputs
        I wanted to avoid the select calendar problems from the Home/Index.cshtml swal in addEvent */
    var createMeetingModal = document.getElementById('meetingCreationModal');
    var createMeetingBtn = document.getElementById('createMeetingBtn');
    var closeCreateMeeting = document.getElementsByClassName('close')[0];
    var submission = document.getElementsByClassName('close')[1];
    var closeTimeSelect = document.getElementsByClassName('close')[2];
    var meetingConfirmationModal = document.getElementById('meetingConfirmationModal');

    createMeetingBtn.onclick = function () {
        createMeetingModal.style.display = "block";
    }
    closeCreateMeeting.onclick = function () {
        createMeetingModal.style.display = "none";
        location.reload(); //TODO: figure out better way to clear user input
    }
    closeTimeSelect.onclick = function(){
        meetingConfirmationModal.style.display = "none";
        location.reload(); //TODO: figure out better way to clear user input
    }
    window.onclick = function (event) {
        if (event.target == createMeetingModal) {
            createMeetingModal.style.display = "none";
            location.reload(); //TODO: figure out better way to clear user input
        }
        else if (event.target == meetingConfirmationModal) {
            meetingConfirmationModal.style.display = "none";
            location.reload(); //TODO: figure out better way to clear user input
        }
    }
    meetingConfirmationModal.onclick = function () {
        meetingConfirmationModal.style.display = "block";
    }

    submission.onclick = function () {
        createMeetingModal.style.display = "none";
        var reason = document.getElementById("meetingReason").value;
        var location = document.getElementById("meetingLocation").value;
        document.getElementById("meetingReason").value = ""; //Clear the user inputs, saved in variable already
        document.getElementById("meetingLocation").value = "";
        var daysSelect = document.getElementById('meetingDaysOut');
        var days = daysSelect.options[daysSelect.selectedIndex].value;
        var lengthSelect = document.getElementById('meetingLength');
        var length = lengthSelect.options[lengthSelect.selectedIndex].value;
        
        /*TODO: this is where the API call for the finding meeting time will go
            I put the friends request one here for now since it does something similar-ish
            to what I think will happen here with meeting times, but let me know if it needs to change. */
        var url = '/EventModels/SuggestEvent'; //TODO: this will be actual meeting creation api call
        
        var meetingData = {
            groupID: @ViewBag.groupID,
            duration: length,
            withinDays: days,
            title: reason,
            location: location,
        }
        
        $.ajax({
            type: 'POST', //TODO: Should this be get or post?
            url: url,
            contentType: 'application/json',
            data: JSON.stringify(meetingData),
            //async: false //Is this needed to make sure ajax doesn't return early, but it should be solved by .done
            success: function(data) {
                //Put the loop outside the function so variables are assigned correctly because closures
                //Also I should be using let more than var in the future
                for(let i = 0; i < data.length; i++){
                    getMeetingTimes(data[i]);
                }
            }
        })
        .done(function (data) {
            //TODO: error checking
            //Do in success function instead?
            //getMeetingTimes(data)
        })
        .fail(function (error) {
            console.log(error);
        });

        function getMeetingTimes(data) {
            console.log(data);
            var potentialTime = document.createElement("div");
            potentialTime.setAttribute('class', 'potentialTime');
            var time = document.createElement('p');
            time.innerHTML = convertToHumanReadable(data.startTime) + " to " + convertToHumanReadable(data.endTime); //TODO: change this to time from meeting api call
            var accept = document.createElement("button");
            accept.innerHTML = "Accept";
                
            accept.onclick = (e) => {
                let timeData = {
                    title: data.title,
                    location: data.location,
                    startTime: new Date (data.startTime).toISOString(), //TODO: is this needed? .toISOString()
                    endTime: new Date(data.endTime).toISOString(),  //TODO: is this needed? .toISOString()
                    calendarID: @ViewBag.GroupCalendarID,
                };

                $.ajax({
                    url: "/EventModels/Create", //TODO: change this to the meeting time accept method
                    type: "POST",
                    dataType: "json",
                    contentType: 'application/json',
                    data: JSON.stringify(timeData), //TODO: will this need to change also?
                    success: function (response) {
                        console.log(response)
                        if (response.status == 'error') {
                            Swal.fire({
                                icon: 'error',
                                title: response.message,
                            }).then((result) => {
                                window.location.reload();
                            })
                        }
                        else {
                            Swal.fire({
                                icon: 'success',
                                title: 'Meeting added to group calendar',
                            }).then((result) => {
                                window.location.reload();
                            })
                        }
                    },
                    //TODO: can this error function be deleted? since it was handled above
                    error: function (response) {
                        console.log("something went wrong in group events ", response)
                        Swal.fire({
                            icon: 'error',
                            title: "Meeting can't be added to group events",
                        }).then((result) => {
                            window.location.reload();
                        })
                    }
                })
            }
            time.setAttribute('class', 'alignTime');
            accept.setAttribute('class', 'alignTime');
            accept.classList.add('btn-danger');
            potentialTime.appendChild(time);
            potentialTime.appendChild(accept);
            var meetingTimesList = document.getElementById("meetingTimesList");
            meetingTimesList.appendChild(potentialTime);
        }
    }

    
    document.body.onload = function() {
        var groupName = document.getElementById("groupName");
        groupName.innerHTML = "@ViewBag.GroupName" + " Group Calendar";
    }

   fetch('/GroupModels/GetGroup?id=' + @ViewBag.groupID)
        .then(function (response) {
            return response.json();
        })
        .then(function (data) {
            getGroupMembers(data);
        })
        .catch(function (e) {
            console.log("error in groups: " + e);
        })

    function getGroupMembers(data) {
        var members = data.users;
        var groupContainer = document.getElementById("groupMembers");
        for (var i = 0; i < members.length; i++) {
            var div = document.createElement("li");
            div.setAttribute('class', 'members'); //Use this later for styling
            div.innerHTML = members[i].firstName + " " + members[i].email;
            groupContainer.appendChild(div);
        }
    }

    /*IMPORTANT TODO: This code could potentially break on AWS because of the JS location it hopefully shouldn't
        But this is to remind that this area could be the problem*/
    function groupLink() {
        /*console.log(location);
        var origin = location.origin;*/
        var url = "@ViewBag.fullUrlRedirect";
        console.log(url);
        Swal.fire({
            icon: 'success',
            title: url,
            text: "Copy the link above to give to someone to join the group"
        })
    }
    
    function convertToHumanReadable(dateToConvert) {
        var dateObj = new Date(dateToConvert)
        var momentObj = moment(dateObj)
        var momentString = momentObj.format('MMMM Do YYYY, h:mm a')
        return momentString
    }

    function leaveGroup() {
        /*Since it's a get, there is no body, only query string parameters
        https://stackoverflow.com/questions/10298899/how-to-send-data-in-request-body-with-a-get-when-using-jquery-ajax */
        Swal.fire({
            title: 'Are you sure you want to leave the group?',
            text: "You won't be able to rejoin without an invite!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, leave group!'
        }).then((result) => {
            if (result.isConfirmed) {
                var url = `/GroupModels/LeaveGroup?id=${@ViewBag.GroupId}`;
                $.ajax({
                    url: url,
                    type: 'DELETE',
                    dataType: 'json',
                    success: function (result) {
                        console.log(result)
                        Swal.fire({
                            title: 'You have left the group',
                            icon: 'success',
                        }).then((result) => {
                            location.replace("../Home/Groups");
                        })
                    },
                    error: function (error) {
                        console.log("error in leaving group")
                    }
                })
            }
        })
    }

    async function addEvent(startDate, endDate) {

        const { value: formValues } = await Swal.fire({
            title: 'Add an event that isn\'t created with the Let\'s Meet button',
            html: //This does no input checking currently
                //TODO: Figure out how to style in css not inline like this.
                //Was struggling to get site.css to acess parts of the popup
                '<div style="display:grid"><label>Event Name</label>' +
                '<input type="text" id="eventName" class="swal2-input">' +
                '<br/></div>' +
                '<div style="display:grid"><label>Event Location</label>' +
                '<input type="text" id="location" class="swal2-input">' +
                '<br/></div>' +
                '<div style="display:grid"><label>Start Date</label>' +
                `<input type="datetime-local" id="startDate" class="swal2-input" value="${startDate}">` + //IMPORTANT: take not of the ` back tick here for string interpolation
                '<br/></div>' +
                '<div style="display:grid"><label>End Date</label>' +
                `<input type="datetime-local" id="endDate" class="swal2-input" value="${endDate}">` +
                '<br/></div>',
            focusConfirm: false,
            position: 'top-end',
            showCancelButton: true,
            confirmButtonText: 'Create Event',
            preConfirm: () => {
                return {
                    eventName: $('#eventName').val(),
                    startDate: $('#startDate').val(),
                    endDate: $('#endDate').val(),
                    location: $('#location').val()
                }
            }
        });
        return formValues;
    }

    function formatStartEndDate(date) {
        var formattedDate = new Date(date)
        var d = String(formattedDate.getDate()).padStart(2, '0')
        var m = String(formattedDate.getMonth() + 1).padStart(2, '0'); //January is 0!
        var y = formattedDate.getFullYear();
        var h = String(formattedDate.getHours()).padStart(2, '0');
        var mi = String(formattedDate.getMinutes()).padStart(2, '0')
        formattedDate = y + "-" + m + "-" + d + "T" + h + ":" + mi
        return formattedDate
    }

</script>